diff --git a/lib/git-directory.js b/lib/git-directory.js
index de97558..2cbcea3 100644
--- a/lib/git-directory.js
+++ b/lib/git-directory.js
@@ -83,7 +83,7 @@ module.exports = function gitDirectory (path) {
 
   function commit (message) {
     const gitCommit = promisify(cwd.commit.bind(cwd))
-    return gitCommit(message)
+    return gitCommit(message, { '--author': '"Dirty Bot <dirty-bot@gmail.com>"' })
   }
 
   function push (remote = 'origin') {
diff --git a/test/command-draft.test.js b/test/command-draft.test.js
index d5dd8d6..94def3f 100644
--- a/test/command-draft.test.js
+++ b/test/command-draft.test.js
@@ -4,7 +4,11 @@ const { join } = require('path')
 const t = require('tap')
 const h = require('./helper')
 
-const cmd = h.buildProxyCommand('../lib/commands/draft')
+const cmd = h.buildProxyCommand('../lib/commands/draft', {
+  git: { tag: { history: 5 } },
+  github: { }, // default OK
+  npm: { } // default OK
+})
 
 const { test } = t
 
@@ -36,7 +40,7 @@ test('draft a version forced release', async t => {
   t.equals(build.name, 'fake-project')
   t.equals(build.version, '12.0.0')
   t.equals(build.oldVersion, '11.14.42')
-  t.equals(build.message, 'ðŸ“š PR:\n- This is a commit without PR\n- doc add fastify-schema-constraint to ecosystem (#1573)\n- Update Ecosystem.md (#1570)\n- Update Routes.md (#1579)\n- TOC added to Reply.md (#1582)\n')
+  t.equals(build.message, 'ðŸ“š PR:\n- this is a standard comment (#123)\n- this is a standard comment (#123)\n- this is a standard comment (#123)\n- this is a standard comment (#123)\n- this is a standard comment (#123)\n')
 })
 
 test('draft a suggested release', async t => {
@@ -54,9 +58,23 @@ test('draft a suggested release', async t => {
 })
 
 test('draft the first release', async t => {
-  t.plan(2)
-
-  const cmd = h.buildProxyCommand('../lib/commands/draft', { emptyTag: true })
+  t.plan(3)
+
+  const cmd = h.buildProxyCommand('../lib/commands/draft', {
+    git: {
+      tag: {
+        history: 0,
+        inputChecker (tagArgs) {
+          t.strictDeepEqual(tagArgs, [
+            '--format=%(objectname)',
+            '--sort=version:refname',
+            '-l',
+            'bad-pattern'
+          ])
+        }
+      }
+    }
+  })
   const opts = buildOptions()
   opts.path = join(__dirname, 'fake-project/')
   opts.tag = 'bad-pattern'
@@ -68,9 +86,22 @@ test('draft the first release', async t => {
 })
 
 test('error management getting PR: works but won\' apply labels', async t => {
-  t.plan(2)
-
-  const cmd = h.buildProxyCommand('../lib/commands/draft', { githubThrow: true })
+  t.plan(3)
+
+  const cmd = h.buildProxyCommand('../lib/commands/draft', {
+    git: {
+      tag: { history: 2 },
+      log: { messages: ['this is a message without PR', 'this is a message with PR (#12345)'] }
+    },
+    github: {
+      labels: {
+        throwError: true,
+        inputChecker (labelsArgs) {
+          t.strictDeepEqual(labelsArgs, { owner: 'foo', repo: 'bar', issue_number: '12345' })
+        }
+      }
+    }
+  })
   const opts = buildOptions()
   opts.path = join(__dirname, 'fake-project/')
   opts.tag = 'bad-pattern'
diff --git a/test/helper.js b/test/helper.js
index 8d71f6d..66dd001 100644
--- a/test/helper.js
+++ b/test/helper.js
@@ -24,13 +24,13 @@ function execute (command, params = []) {
 function buildProxyCommand (commandPath, opts = {}) {
   return proxyquire(commandPath, {
     '../git-directory': proxyquire('../lib/git-directory', {
-      'simple-git': factorySimpleGit(opts)
+      'simple-git': factorySimpleGit(opts.git)
     }),
     '../github': proxyquire('../lib/github', {
-      '@octokit/rest': factoryOctokit(opts)
+      '@octokit/rest': factoryOctokit(opts.github)
     }),
     '../npm': proxyquire('../lib/npm', {
-      'child_process': factoryNpm(opts)
+      'child_process': factoryNpm(opts.npm)
     })
   })
 }
diff --git a/test/proxy/npm-proxy.js b/test/proxy/npm-proxy.js
index 8686797..35d9e84 100644
--- a/test/proxy/npm-proxy.js
+++ b/test/proxy/npm-proxy.js
@@ -1,16 +1,41 @@
 'use strict'
 
+/**
+ * The npm commands are executed via child_process.spawn. This mock implement only the fields that
+ * are used by the npm.js adding a simulator environment.
+ *
+ * A possible input is:
+ * {
+ *   ping: { code: 0 },
+ *   whoami: { code: 0, data: 'string' },
+ *   config: { code: 0, data: 'string' },
+ *   version: { code: 0, data: 'string' },
+ *   publish: { code: 0, data: 'string' }
+ * }
+ */
 module.exports = function factory (opts) {
+  const commandsCode = Object.assign({}, opts)
   return {
     spawn: function (node, args, opts) {
+      const command = args[0]
+      let dataCallback
       return {
         stdout: {
           setEncoding: function (encoding) {},
-          on: function (event, cb) {}
+          on: function (event, cb) {
+            if (event === 'data') {
+              dataCallback = cb
+            }
+          }
         },
         on: function (event, cb) {
           setTimeout(() => {
-            cb(0, 'SIG') // eslint-disable-line standard/no-callback-literal
+            // Default success
+            const { code, data } = commandsCode[command] || { code: 0 }
+            if (data && dataCallback) {
+              dataCallback(data)
+            }
+            cb(code) // eslint-disable-line standard/no-callback-literal
           }, 0)
         }
       }
diff --git a/test/proxy/octokit-proxy.js b/test/proxy/octokit-proxy.js
index dc5f375..e47f310 100644
--- a/test/proxy/octokit-proxy.js
+++ b/test/proxy/octokit-proxy.js
@@ -1,11 +1,27 @@
 'use strict'
 
-module.exports = function factory ({ githubThrow }) {
+function shouldThrows (cmd = {}, params) {
+  if (cmd.inputChecker) {
+    cmd.inputChecker(params)
+  }
+
+  return cmd.throwError || false
+}
+
+/**
+ *
+ * A possible input is:
+ * {
+ *   labels: {inputChecker: func, throwError: true}
+ *   release: {inputChecker: func, throwError: true}
+ * }
+ */
+module.exports = function factory (opts = {}) {
   return function () {
     return {
       issues: {
         listLabelsOnIssue: async function (options) {
-          if (githubThrow === true) {
+          if (shouldThrows(opts['labels'], options)) {
             throw new Error('HttpError - Fake limit reached')
           }
           return {
@@ -23,7 +39,10 @@ module.exports = function factory ({ githubThrow }) {
         }
       },
       repos: async function createRelease (options) {
-        return {}
+        if (shouldThrows(opts['release'], options)) {
+          throw new Error('HttpError - Release error')
+        }
+        return { data: { html_url: 'my-awesome-release-url' } }
       }
     }
   }
diff --git a/test/proxy/simple-git-proxy.js b/test/proxy/simple-git-proxy.js
index 772cf94..b91c4de 100644
--- a/test/proxy/simple-git-proxy.js
+++ b/test/proxy/simple-git-proxy.js
@@ -1,70 +1,73 @@
 'use strict'
 
-module.exports = function factory ({ githubThrow, emptyTag }) {
+function shouldThrows (cmd = {}, params) {
+  if (cmd.inputChecker) {
+    cmd.inputChecker(params)
+  }
+
+  return cmd.throwError || false
+}
+
+/**
+ *
+ * A possible input is:
+ * {
+ *   tag: {inputChecker: func, throwError: true, history: number of tag commit list}
+ *   log: {inputChecker: func, throwError: true, messages: [array of messages to use]}
+ *   status: {inputChecker: func, throwError: true, dirty: true} // TODO
+ *   add: {inputChecker: func, throwError: true}
+ *   commit: {inputChecker: func, throwError: true, commit: 'asd', branch: 'asd'} // TODO
+ *   push: {inputChecker: func, throwError: true}
+ *   pull: {inputChecker: func, throwError: true}
+ * }
+ */
+module.exports = function factory (opts = {}) {
   return function (path) {
+    const state = {
+      history: []
+    }
     return {
-      tag: function (commands, cb) {
-        const history = `dbcf234f456e00e262103c55cf2ce44f64fc1b7e
-55acd4af74a5e74cdf91f5cbc207c86a8b9fdcac
-797d63bbd491e20536d6cae8867c5210db75318e
-dcf63111cd7b062b1b935d9c4925f70c9e08fd05
-10cd7a46bd0ed5b6a4fbc54a7320c5bb76966c9e
-20e8b1bcbe6a28954a01a5a58de9cb9f9d616420
-1606f37011c58b556d07c2539203b95f895838f6
-946d9f84afb202e49c89d8511be14e9bf4740a1b
-b4560139a74d5a40c58d30d1bd7dd2dc21a1b153
-c037c5d6e3a601d0f2c66a31e09bb06fe7c123d2
-a9a2ba10618d9714d9d0d47d7aef4d779f57224f
-        `
-        cb(null, emptyTag === true ? '' : history)
+      tag: function (params, cb) {
+        if (shouldThrows(opts['tag'], params)) {
+          cb(new Error('Error throws by settings'))
+          return
+        }
+
+        const history = []
+        for (let i = 0; i < (opts['tag'].history || 0); i++) {
+          history.push('123abc'.repeat(6) + i)
+        }
+
+        state.history = history
+        cb(null, history.join('\n'))
       },
       log: function (params, cb) {
-        const commits = {
-          all: [ {
-            hash: '68241662e2328127cf571d46194b63da20ea55bc',
-            date: '2019-04-08 01:46:25 +0430',
-            message: 'TOC added to Reply.md (#1582)',
-            refs: 'HEAD -> master, origin/master, origin/HEAD',
-            body: '',
-            author_name: 'srmarjani',
-            author_email: 'razi.marjani@gmail.com' },
-          {
-            hash: 'b23a2a3923e6b644e910c89d4cabd1536c81922d',
-            date: '2019-04-07 20:10:01 +0800',
-            message: 'Update Routes.md (#1579)',
-            refs: '',
-            body: 'fix link',
-            author_name: 'Zoron',
-            author_email: 'zoronlivingston@gmail.com' },
-          {
-            hash: 'a41fb18899e41f40ca1d8e7cb9ace71fa04e373f',
-            date: '2019-04-06 19:27:39 +0200',
-            message: 'Update Ecosystem.md (#1570)',
-            refs: '',
-            body: '',
-            author_name: 'Giacomo Gregoletto',
-            author_email: 'greguz@users.noreply.github.com' },
-          {
-            hash: '60f51bf376a08bc728f1c8b21ac44446104f1d2a',
-            date: '2019-04-06 15:45:43 +0200',
-            message: 'doc add fastify-schema-constraint to ecosystem (#1573)',
-            refs: '',
-            body: '',
-            author_name: 'Manuel Spigolon',
-            author_email: 'behemoth89@gmail.com' },
-          {
-            hash: '8f2a65ae63670e3f5b2219361bc037f006e6c6eb',
-            date: '2019-04-06 15:43:29 +0200',
-            message: 'This is a commit without PR',
-            refs: '',
-            body: '',
-            author_name: 'Tommaso Allevi',
-            author_email: 'tomallevi@gmail.com' } ]
+        if (shouldThrows(opts['log'], params)) {
+          cb(new Error('Error throws by settings'))
+          return
         }
 
-        cb(null, commits)
+        const messagesSet = opts['log'] ? (opts['log'].messages || []) : []
+        const all = state.history.map(hash => ({
+          hash,
+          date: '2019-04-06 15:45:43 +0200',
+          message: messagesSet.pop() || 'this is a standard comment (#123)',
+          refs: '',
+          body: '',
+          author_name: 'Manuel Spigolon',
+          author_email: 'behemoth89@gmail.com'
+        }))
+
+        cb(null, { all })
       },
       status: function (params, cb) {
+        if (shouldThrows(opts['status'], params)) {
+          cb(new Error('Error throws by settings'))
+          return
+        }
+
+        // TODO
+
         cb(null, {
           not_added: [],
           conflicted: [],
@@ -80,15 +83,37 @@ a9a2ba10618d9714d9d0d47d7aef4d779f57224f
         })
       },
       add: function (params, cb) {
+        if (shouldThrows(opts['add'], params)) {
+          cb(new Error('Error throws by settings'))
+          return
+        }
+
         cb(null)
       },
       commit: function (params, cb) {
+        if (shouldThrows(opts['commit'], params)) {
+          cb(new Error('Error throws by settings'))
+          return
+        }
+
+        // TODO
+
         cb(null, { commit: '123', branch: 'master' })
       },
       push: function (params, cb) {
+        if (shouldThrows(opts['push'], params)) {
+          cb(new Error('Error throws by settings'))
+          return
+        }
+
         cb(null)
       },
       pull: function (params, cb) {
+        if (shouldThrows(opts['pull'], params)) {
+          cb(new Error('Error throws by settings'))
+          return
+        }
+
         cb(null)
       }
     }
